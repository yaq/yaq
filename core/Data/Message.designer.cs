#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Yaq.Core.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="queue")]
	public partial class MessageDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    #endregion
		
		public MessageDataContext() : 
				base(global::Yaq.Core.Properties.Settings.Default.queueConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MessageDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MessageDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MessageDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MessageDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
	}
	
	[Table(Name="Queue.Message")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Queue;
		
		private System.Nullable<System.Guid> _PopReceipt;
		
		private System.Data.Linq.Binary _Content;
		
		private System.Nullable<System.DateTime> _TakenTill;
		
		private System.Nullable<System.DateTime> _Queued;
		
		private System.Data.Linq.Binary _Version;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnQueueChanging(string value);
    partial void OnQueueChanged();
    partial void OnPopReceiptChanging(System.Nullable<System.Guid> value);
    partial void OnPopReceiptChanged();
    partial void OnContentChanging(System.Data.Linq.Binary value);
    partial void OnContentChanged();
    partial void OnTakenTillChanging(System.Nullable<System.DateTime> value);
    partial void OnTakenTillChanged();
    partial void OnQueuedChanging(System.Nullable<System.DateTime> value);
    partial void OnQueuedChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Message()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Queue", DbType="VarChar(80)", UpdateCheck=UpdateCheck.Never)]
		public string Queue
		{
			get
			{
				return this._Queue;
			}
			set
			{
				if ((this._Queue != value))
				{
					this.OnQueueChanging(value);
					this.SendPropertyChanging();
					this._Queue = value;
					this.SendPropertyChanged("Queue");
					this.OnQueueChanged();
				}
			}
		}
		
		[Column(Storage="_PopReceipt", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> PopReceipt
		{
			get
			{
				return this._PopReceipt;
			}
			set
			{
				if ((this._PopReceipt != value))
				{
					this.OnPopReceiptChanging(value);
					this.SendPropertyChanging();
					this._PopReceipt = value;
					this.SendPropertyChanged("PopReceipt");
					this.OnPopReceiptChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="VarBinary(8000)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Storage="_TakenTill", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> TakenTill
		{
			get
			{
				return this._TakenTill;
			}
			set
			{
				if ((this._TakenTill != value))
				{
					this.OnTakenTillChanging(value);
					this.SendPropertyChanging();
					this._TakenTill = value;
					this.SendPropertyChanged("TakenTill");
					this.OnTakenTillChanged();
				}
			}
		}
		
		[Column(Storage="_Queued", AutoSync=AutoSync.OnInsert, DbType="DateTime", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Queued
		{
			get
			{
				return this._Queued;
			}
			set
			{
				if ((this._Queued != value))
				{
					this.OnQueuedChanging(value);
					this.SendPropertyChanging();
					this._Queued = value;
					this.SendPropertyChanged("Queued");
					this.OnQueuedChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
